-verbruik erin betrekken
- attribuut transmissie er misschien bij betrekken
-brandstof types = benzine, diesel, hybride, elektriciteit, gas
-https://www.w3schools.com/cssref/tryit.asp?filename=trycss_sel_class_more2


createCar("Volkswagen Polo 1.6", "https://media.autoweek.nl/m/pyryc27bzexp_800.jpg", 2000, 2016, 1800, "diesel", "73-MG-HJ", "Volkswagen", "Polo 1.6");
           createCar("Fiat punto", "https://cdn.autowereld.nl/I392904122/1280x0/fiat-punto-evo-1-3-m-jet-street-airco-cruise-lm-velgen-pdc-plaatje.jpg", 30000, 2010,8000,  "diesel","18-ZH-JP","Fiat", "punto" );


<!--<div class="car">-->
<!--     <button class="city-remove-button js-city-remove-button">-->
<!--                            <span class="visually-hidden">favorite-car</span>-->
<!--                            <img src="Images/favorite-button-svgrepo-com.svg" alt="favorite-button">-->
<!--     </button>-->




    let carData;
    console.log("getcarsbyvalue");
    fetch("restservices/cars/" + document.getElementById("brand").value)
        .then(response => Promise.all([response.status, response.json()]))
        .then(function ([status, myJson]) {
            if (status > 400) {
                alert("geen resultaten gevonden")
            } else {

                console.log(myJson);
                carData = myJson;
                document.getElementById("gesorteerdeAutos").innerHTML = `
${carData.map(carTemplate).join('')}
`
            }
        })



            @GET
            @PermitAll
            @Produces(MediaType.APPLICATION_JSON)
            @Path("{carsByBrand}")
            public Response getCarsByBrand(@Context SecurityContext securityContex, @PathParam("carsByBrand") String brand) {
                if (Car.getCarsByBrand(brand).isEmpty()) {
                    return Response.status(Response.Status.CONFLICT).entity(new AbstractMap.SimpleEntry<>("result", "auto bestaat nog niet")).build();
                }
                return Response.ok(Car.getCarsByBrand(brand)).build();
            }

 public static ArrayList<Car> getCarsByBrand(String brand) {
        ArrayList<Car> theBrandList = new ArrayList<>();
        for (Car car : allCars) {
            if (car.brand.equals(brand)) {
                theBrandList.add(car);
            }
        }
        return theBrandList;
    }


        if (Car.getCarsByValue(brand,yearOfManufactureFrom,yearOfManufactureTill,fuelType).isEmpty()) {
            return Response.status(Response.Status.CONFLICT).entity(new AbstractMap.SimpleEntry<>("result", "auto bestaat nog niet")).build();
        }
        return Response.ok(Car.getCarsByValue(brand,yearOfManufactureFrom,yearOfManufactureTill,fuelType)).build();



